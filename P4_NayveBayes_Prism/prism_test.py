import numpy as np
import unittest

from prism import Prism


class TestPrism(unittest.TestCase):

    def setUp(self):
        # Set up data for the tests
        self.X = np.array([[1, 0], [0, 1], [1, 1], [0, 0]])
        self.y = np.array([1, 1, 0, 0])
        self.prism = Prism()
        self.prism.fit(self.X, self.y)

    def test_fit(self):
        # Test if fit method correctly generates rules
        self.assertEqual(len(self.prism.rules), 3)
        # Check if the rules are as expected (you would need to determine what the correct rules are)
        self.assertIn((0, 0, 0), self.prism.rules)
        self.assertIn((1, 0, 1), self.prism.rules)
        self.assertIn((0, 1, 0), self.prism.rules)


    def test_predict(self):
        # Test if __repr__ method correctly returns the string
        self.assertEqual(str(self.prism), "Prism classifier with rules: " + str(self.prism.rules))
        # Expected predictions, based on the rules generated by the Prism model.
        # These will depend on the specific rules generated by the Prism model on your test data.
        expected = np.array([1., 0., 0., 0.])

        # Get the actual predictions
        predictions = self.prism.predict(self.X)

        # Ensure the predictions are as expected
        np.testing.assert_array_equal(predictions, expected)

    def test_repr(self):
        # Test if __repr__ method correctly returns the string
        self.assertEqual(str(self.prism), "Prism classifier with rules: " + str(self.prism.rules))


if __name__ == "__main__":
    unittest.main()
